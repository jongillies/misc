# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
x_disk_1 = 'C:\Users\blaise\VirtualBox VMs\x_disks\btrfs_lab_disk_1.vdi'
x_disk_2 = 'C:\Users\blaise\VirtualBox VMs\x_disks\btrfs_lab_disk_2.vdi'

Vagrant.configure(2) do |config|

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # to install virtuabox plugin / guests additions
  # run
  # vagrant plugin install vagrant-vbguest
  #
  config.vm.provider "virtualbox" do |vb|

    vb.name = "btrfs_lab"

    # cpu cap
    vb.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]

    # create SATA controller
    vb.customize ["storagectl", :id, 
                  "--add", "sata", 
                  "--name", "SATAController" , 
                  "--portcount", 2, 
                  "--hostiocache", "on"
    ]

    # disk1
    unless File.exist?(x_disk_1)
      vb.customize ['createhd', 
                    '--filename', x_disk_1, 
                    '--format', 'VDI', 
                    '--size', 10 * 1024
      ]
    end
    vb.customize ['storageattach', :id,  
                  '--storagectl', 'SATAController', 
                  '--port', 1, 
                  '--device', 0, 
                  '--type', 'hdd', 
                  '--medium', x_disk_1
    ]
    
    # disk2
    unless File.exist?(x_disk_2)
      vb.customize ['createhd', 
                    '--filename', x_disk_2, 
                    '--format', 'VDI', 
                    '--size', 10 * 1024
      ]
    end
    vb.customize ['storageattach', :id,  
                  '--storagectl', 'SATAController', 
                  '--port', 2, 
                  '--device', 0, 
                  '--type', 'hdd', 
                  '--medium', x_disk_2
    ]

    vb.memory = "1024"
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
  # 

end
